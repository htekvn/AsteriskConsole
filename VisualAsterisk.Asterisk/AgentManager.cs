using System;
using System.Collections.Generic;
using System.Text;
using Asterisk.NET.Manager;
using Asterisk.NET.Manager.Event;
using Asterisk.NET.Manager.Action;
using System.Diagnostics;

namespace VisualAsterisk.Asterisk
{
    class AgentManager : IAsteriskServerComponent
    {
        //private  Log logger = LogFactory.getLog(this.getClass());
        private DefaultAsteriskServer server;
        /**
         * A Map of agents by thier agentId.
         */
        private IDictionary<string, AsteriskAgent> agents;

        /**
         * A Map of agent in State RINGING by the caller Id. Needed to return agent
         * into idle State, if call was not conneted.
         */
        private IDictionary<string, AsteriskAgent> ringingAgents;

        public AgentManager(DefaultAsteriskServer asteriskServer)
        {
            this.server = asteriskServer;
            agents = new Dictionary<string, AsteriskAgent>();
            ringingAgents = new Dictionary<string, AsteriskAgent>();
        }

        /**
         * Retrieves all agents registered at Asterisk server by sending an
         * AgentsAction.
         *
         * @throws ManagerCommunicationException if communication with Asterisk
         *                                       server fails.
         */
        public void Initialize()
        {
            ResponseEvents re;
            Disconnected();
            re = server.sendEventGeneratingAction(new AgentsAction());
            foreach (ManagerEvent e in re.Events)
            {
                if (e is AgentsEvent)
                {
                    //System.cons.println(e);
                    handleAgentsEvent((AgentsEvent)e);
                }
            }
        }

        public void Disconnected()
        {
            lock (agents)
            {
                agents.Clear();
            }
        }

        /**
         * On AgentsEvent create a new Agent.
         *
         * @param event generated by Asterisk server.
         */
        internal void handleAgentsEvent(AgentsEvent e)
        {
            AsteriskAgent agent = new AsteriskAgent(server,
                    e.Name, "Agent/" + e.Agent, (AgentState) Enum.Parse(typeof(AgentState), e.Status));
            Trace.TraceInformation("Adding agent " + agent.Name + "(" + agent.AgentId + ")");
            addAgent(agent);
        }

        /**
         * Add a new agent to the manager.
         *
         * @param agent agent to add.
         */
        private void addAgent(AsteriskAgent agent)
        {
            lock (agents)
            {
                if (!agents.ContainsKey(agent.AgentId))
                {
                    agents.Add(agent.AgentId, agent);                    
                }
            }
            server.OnNewAgent(agent);
        }

        /**
         * Return the requested agent.
         *
         * @param agentId identifier for agent
         * @return the requested agent
         */
        AsteriskAgent getAgentByAgentId(string agentId)
        {
            lock (agents)
            {
                return agents[agentId];
            }
        }

        /**
         * Update State if agent was called.
         *
         * @param event
         */
        internal void handleAgentCalledEvent(AgentCalledEvent e)
        {
            AsteriskAgent agent = getAgentByAgentId(e.CallerId);
            if (agent == null)
            {
                Trace.TraceError("Ignored AgentCalledEvent for unknown agent " + e.CallerId);
                return;
            }
            updateRingingAgents(e.ChannelCalling, agent);
            updateAgentState(agent, AgentState.AGENT_RINGING);
        }

        /**
         * Set State of agent.
         *
         * @param agent
         */
        private void updateAgentState(AsteriskAgent agent, AgentState newState)
        {
            Trace.TraceInformation("Set state of agent " + agent.AgentId + " to " + newState);
            lock (agent)
            {
                agent.updateState(newState);
            }
        }

        /**
         * Updates State of agent, if the call in a queue was redirect to the next
         * agent because the ringed agent doesn't answer the call. After reset
         * State, put the next agent in charge.
         *
         * @param channelCalling
         * @param agent
         */
        private void updateRingingAgents(string channelCalling, AsteriskAgent agent)
        {
            lock (ringingAgents)
            {
                if (ringingAgents.ContainsKey(channelCalling))
                {
                    updateAgentState(ringingAgents[channelCalling], AgentState.AGENT_IDLE);
                }
                ringingAgents.Add(channelCalling, agent);
            }
        }

        /**
         * Update State if agent was connected to Channel.
         *
         * @param event
         */
        internal void handleAgentConnectEvent(AgentConnectEvent e)
        {
            AsteriskAgent agent = getAgentByAgentId(e.Channel);
            if (agent == null)
            {
                Trace.TraceError("Ignored AgentConnectEvent for unknown agent " + e.Channel);
                return;
            }
            agent.updateState(AgentState.AGENT_ONCALL);
        }

        /**
         * Change State if agent logs in.
         *
         * @param event
         */
        internal void handleAgentLoginEvent(AgentLoginEvent e)
        {
            AsteriskAgent agent = getAgentByAgentId("Agent/" + e.Agent);
            if (agent == null)
            {
                lock (agents)
                {
                    Trace.TraceError("Ignored AgentLoginEvent for unknown agent "
                                    + e.Agent + ". Agents: " + agents.Values.ToString());

                }
                return;
            }
            agent.updateState(AgentState.AGENT_IDLE);
        }

        /**
         * Change State if agent logs out.
         *
         * @param event
         */
        internal void handleAgentLogoffEvent(AgentLogoffEvent e)
        {
            AsteriskAgent agent = getAgentByAgentId("Agent/" + e.Agent);
            if (agent == null)
            {
                Trace.TraceError("Ignored AgentLogoffEvent for unknown agent "
                        + e.Agent + ". Agents: "
                        + agents.Values.ToString());
                return;
            }
            agent.updateState(AgentState.AGENT_LOGGEDOFF);
        }

        /**
         * Change State if agent logs in.
         *
         * @param event
         */
        internal void handleAgentCallbackLoginEvent(AgentCallbackLoginEvent e)
        {
            AsteriskAgent agent = getAgentByAgentId("Agent/" + e.Agent);
            if (agent == null)
            {
                lock (agents)
                {
                    Trace.TraceError("Ignored AgentCallbackLoginEvent for unknown agent "
                                   + e.Agent + ". Agents: " + agents.Values.ToString());

                }
                return;
            }
            agent.updateState(AgentState.AGENT_IDLE);
        }

        /**
         * Change State if agent logs out.
         *
         * @param e
         */
        internal void handleAgentCallbackLogoffEvent(AgentCallbackLogoffEvent e)
        {
            AsteriskAgent agent = getAgentByAgentId("Agent/" + e.Agent);
            if (agent == null)
            {                
                Trace.TraceError("Ignored AgentCallbackLogoffEvent for unknown agent "
                        + e.Agent + ". Agents: "
                        + agents.Values.ToString());
                return;
            }
            agent.updateState(AgentState.AGENT_LOGGEDOFF);

        }

        /**
         * Return all agents registered at Asterisk server.
         *
         * @return a IList of all agents.
         */
        internal IList<AsteriskAgent> getAgents()
        {
            IList<AsteriskAgent> copy;

            lock (agents)
            {
                copy = new List<AsteriskAgent>(agents.Values);
            }
            return copy;
        }

        /**
         * Change State if connected call was terminated.
         *
         * @param e
         */
        internal void handleAgentCompleteEvent(AgentCompleteEvent e)
        {
            AsteriskAgent agent = getAgentByAgentId(e.Channel);
            if (agent == null)
            {
                Trace.TraceError("Ignored AgentCompleteEvent for unknown agent " + e.Channel);
                return;
            }
            agent.updateState(AgentState.AGENT_IDLE);
        }
    }
}
