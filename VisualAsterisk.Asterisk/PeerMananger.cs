using System;
using System.Collections.Generic;
using System.Text;
using Asterisk.NET.Manager.Action;
using Asterisk.NET.Manager.Event;
using System.Diagnostics;
using Asterisk.NET.Manager;
using System.Reflection;

namespace VisualAsterisk.Asterisk
{
    /// <summary>
    /// Manages Peer events on behalf of an AsteriskServer.
    /// </summary>
    public class PeerMananger : IAsteriskServerComponent
    {
        private DefaultAsteriskServer server;
        private ChannelManager channelManager;
        /**
         * A Map of peers by thier peerName.
         */
        private IDictionary<string, AsteriskPeer> peers;

        /**
         * A Map of Peer in State RINGING by the caller Id. Needed to return Peer
         * into idle State, if call was not conneted.
         */
        //private IDictionary<string, AsteriskPeer> ringingAgents;

        public PeerMananger(DefaultAsteriskServer asteriskServer, ChannelManager channelManager)
        {
            this.server = asteriskServer;
            this.channelManager = channelManager;
            peers = new Dictionary<string, AsteriskPeer>();
        }
        
        /// <summary>
        /// Retrieves all peers registered at Asterisk server by sending an
        /// SipPeersAction.
        /// 
        /// @throws ManagerCommunicationException if communication with Asterisk
        /// server fails.
        /// </summary>
        public void Initialize()
        {
            Trace.TraceInformation(MethodBase.GetCurrentMethod().Name);
            ResponseEvents re;
            Disconnected();
            re = server.sendEventGeneratingAction(new SIPPeersAction());
            if (re.Response.IsSuccess())
            {
                foreach (ManagerEvent e in re.Events)
                {
                    if (e is PeerEntryEvent)
                    {
                        handlePeerEntryEvent((PeerEntryEvent)e);
                    }
                }
            }
            else
            {
                // FIXME: throw a exception ?
                Trace.TraceError(string.Format("Command SIPPeersAction failed. Response={0}, Message={1}", re.Response.Response, re.Response.Message));
            }
            // HACK: is this good design?
            server.NewAsteriskChannel += new NewChannelEventHandler(server_NewAsteriskChannel);
        }

        void server_NewAsteriskChannel(object sender, AsteriskChannel channel)
        {
            if (channel.Name.IndexOf('-') > 0)
            {
                string name = channel.Name.Substring(0, channel.Name.IndexOf('-'));
                if (peers.ContainsKey(name))
                {
                    AsteriskPeer peer = peers[name];
                    peer.Channel = channel;
                    channel.Peer = peer;
                } 
            }
        }

        public void Disconnected()
        {
            lock (peers)
            {
                peers.Clear();
            }
        }

        /**
         * On PeerEntryEvent create a new Peer.
         *
         * @param event generated by Asterisk server.
         */
        internal void handlePeerEntryEvent(PeerEntryEvent e)
        {
            Trace.TraceInformation(MethodBase.GetCurrentMethod().Name);

            AsteriskPeer peer = new AsteriskPeer(server);
            peer.ObjectName = e.ObjectName;
            peer.RealtimeDevice = e.RealtimeDevice;
            peer.Status = e.Status;
            peer.TextSupport = e.TextSupport;
            peer.VideoSupport = e.VideoSupport;
            peer.Acl = e.Acl;
            peer.ChannelType = e.ChannelType;
            peer.ChanObjectType = e.ChanObjectType;
            peer.Dynamic = e.Dynamic;
            peer.IpAddress = e.IpAddress;
            peer.IpPort = e.IpPort;
            peer.NatSupport = e.NatSupport;
            Trace.TraceInformation("Adding peer " + peer.Name);

            addPeer(peer);
        }

        /**
         * Add a new Peer to the manager.
         *
         * @param Peer Peer to add.
         */
        private void addPeer(AsteriskPeer peer)
        {
            lock (peers)
            {
                if (!peers.ContainsKey(peer.Name))
                {
                    peers.Add(peer.Name, peer);
                    server.OnNewPeer(peer);
                }
            }
        }

        /**
         * Return the requested Peer.
         *
         * @param peerName identifier for Peer
         * @return the requested Peer
         */
        AsteriskPeer getPeerByPeerName(string peerName)
        {
            lock (peers)
            {
                return peers[peerName];
            }
        }

        /**
         * Update State when PeerStatusEvent received.
         *
         * @param event
         */
        internal void handlePeerStatusEvent(PeerStatusEvent e)
        {
            AsteriskPeer peer = getPeerByPeerName(e.Peer);
            if (peer == null)
            {
                Trace.TraceError("Ignored PeerStatusEvent for unknown peer " + e.Peer);
                return;
            }
            updatePeertState(peer, e.PeerStatus);
        }

        /**
         * Set State of Peer.
         *
         * @param Peer
         */
        private void updatePeertState(AsteriskPeer peer, string newState)
        {
            Trace.TraceInformation("Set state of peer " + peer.Name + " to " + newState);
            lock (peer)
            {
                peer.updateState(newState);
            }
        }

        /**
         * Update State if Peer was connected to Channel.
         *
         * @param event
         */
        //internal void handleAgentConnectEvent(AgentConnectEvent e)
        //{
        //    AsteriskPeer Peer = getAgentByAgentId(e.Channel);
        //    if (Peer == null)
        //    {
        //        Trace.TraceError("Ignored AgentConnectEvent for unknown Peer " + e.Channel);
        //        return;
        //    }
        //    Peer.updateState(AgentState.AGENT_ONCALL);
        //}

        /**
         * Change State if Peer logs in.
         *
         * @param event
         */
        /**
         * Return all peers registered at Asterisk server.
         *
         * @return a IList of all peers.
         */
        internal IList<AsteriskPeer> getPeers()
        {
            IList<AsteriskPeer> copy;

            lock (peers)
            {
                copy = new List<AsteriskPeer>(peers.Values);
            }
            return copy;
        }

        /**
         * Change State if connected call was terminated.
         *
         * @param e
         */
        internal void handlePeerlistCompleteEvent(PeerlistCompleteEvent peerlistCompleteEvent)
        {
            //throw new NotImplementedException();
        }
    }
}
